import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import requests


bot = Bot(token='BOTTOKEN')
dp = Dispatcher()

users = {}

class ProfileStates(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()

class FoodStates(StatesGroup):
    waiting_for_food_amount = State()

class CalorieGoalState(StatesGroup):
    input_value = State()


@dp.message(Command('start'))
async def cmd_start(message: Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–æ–¥—É, –∫–∞–ª–æ—Ä–∏–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è')


@dp.message(Command('set_profile'))
async def cmd_set_profile(message: Message, state: FSMContext):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):')
    await state.set_state(ProfileStates.weight)

@dp.message(ProfileStates.weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        await state.update_data(weight=float(message.text))
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):')
        await state.set_state(ProfileStates.height)
    except ValueError:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞')

@dp.message(ProfileStates.height)
async def process_height(message: Message, state: FSMContext):
    try:
        await state.update_data(height=float(message.text))
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')
        await state.set_state(ProfileStates.age)
    except ValueError:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞')

@dp.message(ProfileStates.age)
async def process_age(message: Message, state: FSMContext):
    try:
        await state.update_data(age=int(message.text))
        await message.reply('–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?')
        await state.set_state(ProfileStates.activity)
    except ValueError:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞')

@dp.message(ProfileStates.activity)
async def process_activity(message: Message, state: FSMContext):
    try:
        await state.update_data(activity=int(message.text))
        await message.reply('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?')
        await state.set_state(ProfileStates.city)
    except ValueError:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!')

@dp.message(ProfileStates.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    data = await state.get_data()
    user_id = message.from_user.id

    water_goal = calculate_water_goal(data['weight'], data['activity'], city)
    calorie_goal = calculate_calorie_goal(data['weight'], data['height'], data['age'])

    users[user_id] = {
        'weight': data['weight'],
        'height': data['height'],
        'age': data['age'],
        'activity': data['activity'],
        'city': city,
        'water_goal': water_goal,
        'calorie_goal': calorie_goal,
        'logged_water': 0,
        'logged_calories': 0,
        'burned_calories': 0,
    }

    await message.reply(f'–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n'
                        f'–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª\n'
                        f'–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª')
    await state.clear()


@dp.message(Command('set_calorie_goal'))
async def set_calorie_goal_handler(message: Message, state: FSMContext):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π (–≤ –∫–∫–∞–ª). –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è —Ä–∞—Å—Å—á–∏—Ç–∞–ª –Ω–æ—Ä–º—É –¥–ª—è –≤–∞—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–≤–µ–¥–∏—Ç–µ 0')
    await state.set_state(CalorieGoalState.input_value)

@dp.message(CalorieGoalState.input_value)
async def save_calorie_goal(message: Message, state: FSMContext):
    try:
        calorie_goal = int(message.text)
        user_id = message.from_user.id

        if user_id not in users:
            await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile –ø—Ä–µ–∂–¥–µ, —á–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π')
            await state.clear()
            return

        if calorie_goal == 0:
            data = users[user_id]
            calorie_goal = calculate_calorie_goal(data['weight'], data['height'], data['age'])

        users[user_id]['calorie_goal'] = calorie_goal
        await message.reply(f'–í–∞—à–∞ –Ω–æ–≤–∞—è —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {calorie_goal} –∫–∫–∞–ª')
        await state.clear()
    except ValueError:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π')


def calculate_water_goal(weight, activity_minutes, city):
    base_water = weight * 30
    activity_water = (activity_minutes // 30) * 500  # +500 –º–ª –∑–∞ 30 –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    weather_water = 0

    temperature = get_city_temperature(city)
    if temperature and temperature > 25:
        weather_water = 500
    elif temperature and temperature > 30:
        weather_water = 1000  # –¢—É—Ç —Ä–∞–Ω–¥–æ–º

    total_water = base_water + activity_water + weather_water
    return int(total_water)


def get_city_temperature(city): # –°–º–æ—Ç—Ä–∏–º –Ω–∞ —Ç–µ–º–ø—É –≤ –≥–æ—Ä–æ–¥–µ, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –≤ —Ñ–æ—Ä–º—É–ª–µ
    API_KEY = 'APITOKEN'
    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        temperature = data['main']['temp']
        return temperature
    else:
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}')
        return None

# —Ñ–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
def calculate_calorie_goal(weight, height, age):
    calorie_goal = 10 * weight + 6.25 * height - 5 * age + 5  # —ç—Ç–∞ –∏–Ω—Ñ–∞ –¥–ª—è –º—É–∂—á–∏–Ω, –¥–ª—è –∂–µ–Ω—â–∏–Ω –≤—ã—á–µ—Å—Ç—å 161 –≤–º–µ—Å—Ç–æ +5 (–ù–ï –ó–ê–ë–£–î–¨)
    return int(calorie_goal)


@dp.message(Command('log_water'))
async def cmd_log_water(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile')
        return
    try:
        amount = int(message.text.split()[1])
        users[user_id]['logged_water'] += amount
        remaining = users[user_id]['water_goal'] - users[user_id]['logged_water']
        await message.reply(f'–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã.\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–ª –¥–æ –Ω–æ—Ä–º—ã.')
    except (IndexError, ValueError):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤_–º–ª>')


@dp.message(Command('log_food'))
async def cmd_log_food(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile')
        return

    try:
        product_name = ' '.join(message.text.split()[1:])
        food_info = get_food_info(product_name)
        if food_info:
            await state.update_data(food_calories=food_info['calories'])
            await state.set_state(FoodStates.waiting_for_food_amount)
            await message.reply(f"üçè {food_info['name']} ‚Äî {food_info['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
        else:
            await message.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ')
    except IndexError:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–¥—É–∫—Ç–∞>')

@dp.message(FoodStates.waiting_for_food_amount)
async def process_food_amount(message: Message, state: FSMContext):
    try:
        grams = float(message.text)
        data = await state.get_data()
        calories_per_100g = data['food_calories']
        total_calories = (calories_per_100g * grams) / 100

        user_id = message.from_user.id
        users[user_id]['logged_calories'] += total_calories
        await message.reply(f'–ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories:.1f} –∫–∫–∞–ª.')
        await state.clear()
    except ValueError:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö')


def get_food_info(product_name):
    url = f'https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        products = data.get('products', [])
        if products:
            first_product = products[0]
            return {
                'name': first_product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'calories': first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
            }
    return None


@dp.message(Command('log_workout'))
async def cmd_log_workout(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile')
        return
    try:
        parts = message.text.split()
        workout_type = parts[1]
        duration = int(parts[2])

        met_values = {
            '–ë–µ–≥': 10,
            '–•–æ–¥—å–±–∞': 3.5,
            '–í–µ–ª–æ—Å–∏–ø–µ–¥': 8
        }
        met = met_values.get(workout_type, 5)  # –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –º–µ—Ç–æ–±–æ–ª–∏–∑–º–∞ –±—É–¥–µ—Ç 5

        weight = users[user_id]['weight']
        calories_burned = (met * 3.5 * weight * duration) / 200

        users[user_id]['burned_calories'] += calories_burned
        await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ '{workout_type}' –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {duration} –º–∏–Ω. "
                            f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_burned:.1f} –∫–∫–∞–ª.")
    except (IndexError, ValueError):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /log_workout <—Ç–∏–ø> <–≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö>')


@dp.message(Command('stats'))
async def cmd_stats(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile')
        return

    user_data = users[user_id]

    water_intake = user_data['logged_water']
    water_goal = user_data['water_goal']
    calories_consumed = user_data['logged_calories']
    calories_burned = user_data['burned_calories']
    calorie_goal = user_data['calorie_goal']

    net_calories = calories_consumed - calories_burned
    calories_remaining = calorie_goal - net_calories

    await message.reply(f'üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n'
                        f'üíß –í—ã–ø–∏—Ç–æ –≤–æ–¥—ã: {water_intake} –º–ª –∏–∑ {water_goal} –º–ª\n'
                        f'üçè –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_consumed:.1f} –∫–∫–∞–ª\n'
                        f'üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_burned:.1f} –∫–∫–∞–ª\n'
                        f'‚öñÔ∏è –ß–∏—Å—Ç—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {net_calories:.1f} –∫–∫–∞–ª\n'
                        f'üéØ –û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Ç—Ä–µ–±–∏—Ç—å: {calories_remaining:.1f} –∫–∫–∞–ª –¥–æ —Ü–µ–ª–∏',
                        parse_mode='Markdown')
    

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
